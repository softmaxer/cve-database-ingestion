package cmd

import (
	"fmt"
	"log"
	"os/exec"

	"github.com/jasonlvhit/gocron"

	"nvdbase/database"
)

func Update(dataPath, outputFilePath, groqApiKey string) {
	gocron.Every(2).Hours().Do(updateDatabase, dataPath, groqApiKey, outputFilePath)
	<-gocron.Start()
}

func updateDatabase(dataPath, groqApiKey, outputFilePath string) {
	getModifiedData(dataPath)
	dataModifiedFile := fmt.Sprintf("%s/nvdcve-1.1-modified.json", dataPath)
	vulnerabilities := database.LoadData(dataModifiedFile)
	if len(vulnerabilities) == 0 {
		log.Println("Nothing to do, exiting")
		return
	}

	pkgInfoCh := database.GetPkgInfo(vulnerabilities, groqApiKey, MODEL_NAME)
	for pkgInfo := range pkgInfoCh {
		database.VerifyAndWrite(&pkgInfo, outputFilePath)
	}
}

func getModifiedData(dataPath string) {
	outputFilePath := fmt.Sprintf("%s/modified.zip", dataPath)
	curlOutput, err := exec.Command(
		"curl",
		"-o",
		outputFilePath,
		"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.zip",
	).Output()
	if err != nil {
		log.Println("error executing curl: ", err.Error())
		return
	}
	log.Println(curlOutput)

	_, err = exec.Command("unzip", outputFilePath, "-d", dataPath).Output()
	if err != nil {
		log.Println("error executing unzip: ", err.Error())
		return
	}
}
