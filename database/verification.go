package database

import (
	"bytes"
	"fmt"
	"io"
	"log"
	"net/http"

	"nvdbase/cve"
)

const (
	OVS_COMMIT_SEARCH_URL = "https://api.osv.dev/v1/query"
	OVS_ID_SERCH_URL      = "https://api.osv.dev/v1/vulns/"
)

func getAdditionalInformation(pkgInfo *cve.PackageInfoNVD) cve.PackageListOVS {
	fmt.Printf("Getting additional information with package: %+v\n", pkgInfo)
	if pkgInfo.GHSAId == "" && pkgInfo.Commit == "" {
		log.Println("no package found, returning")
		return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
	}

	if pkgInfo.Commit != "" {
		// write package info with commit id
		commitRequest := map[string]interface{}{"commit": pkgInfo.Commit}
		requestBody, err := cve.Encode(commitRequest)
		if err != nil {
			log.Println(err.Error())
			return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
		}
		req, err := http.NewRequest("POST",
			OVS_COMMIT_SEARCH_URL,
			bytes.NewBuffer(requestBody))
		if err != nil {
			log.Println(err.Error())
			return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
		}
		response, err := http.DefaultClient.Do(req)
		if err != nil {
			log.Println(err.Error())
			return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
		}

		defer response.Body.Close()
		responseBody, err := io.ReadAll(response.Body)
		if err != nil {
			log.Println(err.Error())
			return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
		}

		// fmt.Println("Received response: ", string(responseBody))

		var ovsResponse cve.PackageListOVS
		err = cve.Decode(responseBody, &ovsResponse)
		if err != nil {
			log.Println(err.Error())
			return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
		}
		// fmt.Printf("OVS response: %+v\n", ovsResponse)
		return ovsResponse
	}

	if pkgInfo.GHSAId != "" {
		// write package info with GHSA id
		url := fmt.Sprintf("%s%s", OVS_ID_SERCH_URL, pkgInfo.GHSAId)
		log.Println("Performing request with url: ", url)
		req, err := http.NewRequest(
			"GET",
			url,
			nil,
		)
		if err != nil {
			log.Println(err.Error())
			return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
		}
		response, err := http.DefaultClient.Do(req)
		if err != nil {
			log.Println(err.Error())
			return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
		}

		if response.StatusCode != http.StatusOK {
			log.Println("Received status: ", response.Status)
			return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
		}

		defer response.Body.Close()
		responseBody, err := io.ReadAll(response.Body)
		fmt.Println("Received response: ", string(responseBody))
		if err != nil {
			log.Println(err.Error())
			return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
		}

		var ovsResponse cve.PackageInfoOVS
		err = cve.Decode(responseBody, &ovsResponse)
		if err != nil {
			log.Println(err.Error())
			return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
		}
		// fmt.Printf("OVS response: %+v\n", ovsResponse)
		return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{ovsResponse}}
	}

	return cve.PackageListOVS{Vulns: []cve.PackageInfoOVS{}}
}
